const express = require("express");
const router = express.Router();

const Temp = require("../models/Temp");
const Tempcontrollers = require("../models/Tempcontrollers");

const Moisture = require("../models/Moi");
const Moicontrollers = require("../models/Moicontrollers");


// get request will be generated by Client(Frontend) program
router.get("/gettemp", async (req, res) => {
  try {
    const temp = await Temp.find();
    if (!temp) {
      return res.status(400).json({ msg: "There is no temperatures in DB." });
    }
    return res.json(temp);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// post request will be generated by Python program
// to set temp
router.post("/settemp", async (req, res) => {
  try {
    const { temp, sensor_id, user_id } = req.body;
    const settemp = new Temp({
      temp,
      sensor_id,
      user_id,
      entrytime: Date.now(),
    });
    await settemp.save();
    return res.json(settemp);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// get request will be generated by Client(Frontend) program
// get all temp by user id of all sensors.
router.get("/getmytemp", async (req, res) => {
  try {
    const tempdata = await Temp.find({ user_id: req.body.user_id });
    if (!tempdata) {
      return res.status(400).json({ msg: "There are no data for this user." });
    }
    return res.json(tempdata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// get all id of sensors by user id
router.post("/getdisidofsensors", async (req, res) => {
  try {
    const tempdata = await Temp.find({ user_id: req.body.user_id }).distinct(
      "sensor_id"
    );
    if (!tempdata) {
      return res.status(400).json({ msg: "There are no data for this user." });
    }
    return res.json(tempdata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// get recent temp of user id and sensor id
router.post("/getmytemp/:id", async (req, res) => {
  try {
    const tempdata = await Temp.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    })
      .sort({ _id: -1 })
      .limit(1);
    if (!tempdata) {
      return res.status(400).json({ msg: "There are no data for this user." });
    }
    return res.json(tempdata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// get all temp by sensor id
router.post("/getmytempbysid/:id", async (req, res) => {
  try {
    const tempdata = await Temp.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    }).sort({ _id: -1 });
    if (!tempdata) {
      return res.status(400).json({ msg: "There are no data for this user." });
    }
    return res.json(tempdata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

router.post("/getchartdata/:id", async (req, res) => {
  try {
    const tempdata = await Temp.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    })
      .sort({ _id: -1 })
      .limit(300);

    if (!tempdata) {
      return res.status(400).json({ msg: "There are no data for this user." });
    }
    return res.json(tempdata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

//
// ****** Controllers ******
//

// get controller data
router.post("/getcontrollerstatus/:id", async (req, res) => {
  try {
    const controllerdata = await Tempcontrollers.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    })
      .sort({ _id: -1 })
      .limit(1);
    if (!controllerdata) {
      return res.status(400).json({ msg: "There are no data for this user." });
    }
    return res.json(controllerdata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// to save/ update status
router.post("/setcontrollerstatus", async (req, res) => {
  try {
    const {
      sensor_id,
      user_id,
      fan_status,
      light_status,
      lowerbound_temp,
      upperbound_temp,
    } = req.body;

    const existingcontrollerdata = await Tempcontrollers.find({
      user_id,
      sensor_id,
    });

    if (existingcontrollerdata.length != 0) {
      const updatedstatus = await Tempcontrollers.findOneAndUpdate(
        { user_id, sensor_id },
        {
          fan_status,
          light_status,
          lowerbound_temp,
          upperbound_temp,
        },
        function (err, result) {
          if (err) {
            res.send(err);
          } else {
            return res.json(result);
          }
        }
      );
    } else {
      const controllerstatus = new Tempcontrollers({
        sensor_id,
        user_id,
        fan_status,
        light_status,
        lowerbound_temp,
        upperbound_temp,
      });
      await controllerstatus.save();
      return res.json(controllerstatus);
    }
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// ------------------------------------------------------------------------------

//
// ****** Moisture ******
//

// ------------------------------------------------------------------------------

// get request will be generated by Client(Frontend) program
// gets all moisture objects
router.get("/getmoi", async (req, res) => {
  try {
    const moi = await Moisture.find();
    if (!moi) {
      return res.status(400).json({ msg: "There is no moi Data in DB." });
    }
    return res.json(moi);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// post request will be generated by Python program
// to set temp
router.post("/setmoi", async (req, res) => {
  try {
    const { moisture, sensor_id, user_id } = req.body;
    const setmoi = new Moisture({
      moisture,
      sensor_id,
      user_id,
      entrytime: Date.now(),
    });
    await setmoi.save();
    return res.json(setmoi);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});


// get request will be generated by Client(Frontend) program
// get all temp by user id of all sensors.
router.get("/getmymoi", async (req, res) => {
  try {
    const moidata = await Moisture.find({ user_id: req.body.user_id });
    if (!moidata) {
      return res.status(400).json({ msg: "There is no data for this user." });
    }
    return res.json(moidata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// get all id of moisture sensors by user id
router.post("/getdisidofmoisensors", async (req, res) => {
  try {
    const moidata = await Moisture.find({ user_id: req.body.user_id }).distinct(
      "sensor_id"
    );
    if (!moidata) {
      return res.status(400).json({ msg: "There is no data for this user." });
    }
    return res.json(moidata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// get recent moi of user id and sensor id
router.post("/getmymoi/:id", async (req, res) => {
  try {
    const moidata = await Moisture.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    })
      .sort({ _id: -1 })
      .limit(1);
    if (!moidata) {
      return res.status(400).json({ msg: "There is no data for this user." });
    }
    return res.json(moidata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// get all moi by sensor id
router.post("/getmymoibysid/:id", async (req, res) => {
  try {
    const moidata = await Moisture.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    }).sort({ _id: -1 });
    if (!moidata) {
      return res.status(400).json({ msg: "There is no data for this user." });
    }
    return res.json(moidata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

router.post("/getchartdataformoi/:id", async (req, res) => {
  try {
    const moidata = await Moisture.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    })
      .sort({ _id: -1 })
      .limit(300);

    if (!moidata) {
      return res.status(400).json({ msg: "There is no data for this user." });
    }
    return res.json(moidata);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

//
// ****** Controllers ******
//

// get controller data
router.post("/getcontrollerstatusmoi/:id", async (req, res) => {
  try {
    const moicontroller = await Moicontrollers.find({
      user_id: req.body.user_id,
      sensor_id: req.params.id,
    })
      .sort({ _id: -1 })
      .limit(1);
    if (moicontroller.length === 0) {
      return res.status(400).json({ msg: "There is no data for this user." });
    }
    return res.json(moicontroller);
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

// to save/ update status
router.post("/setcontrollerstatusmoi", async (req, res) => {
  try {
    const {
      sensor_id,
      user_id,
      motor_status,
      lowerbound_moi,
      upperbound_moi,
    } = req.body;

    const existingcontrollerdata = await Moicontrollers.find({
      user_id,
      sensor_id,
    });

    if (existingcontrollerdata.length != 0) {
      const updatedstatus = await Moicontrollers.findOneAndUpdate(
        { user_id, sensor_id },
        {
          motor_status,
          lowerbound_moi,
          upperbound_moi
        },
        function (err, result) {
          if (err) {
            res.send(err);
          } else {
            return res.json(result);
          }
        }
      );
    } else {
      const controllerstatus = new Moicontrollers({
        sensor_id,
        user_id,
        motor_status,
        lowerbound_moi,
        upperbound_moi
      });
      await controllerstatus.save();
      return res.json(controllerstatus);
    }
  } catch (error) {
    console.error(error.message);
    return res.status(500).send("Server Error.");
  }
});

module.exports = router;
// Senddata receivedata warning and on the hardware/hardware status
